# This is a basic workflow to help you get started with Actions

name: Staging

# Controls when the workflow will run
on:
  push:
    branches: [ master ]
  pull_request:
  workflow_dispatch:
    inputs:
      Tag:
        required: true
        type: choice
        options:
          - debug
          - staging
          - mono_staging1
          - mono_staging2
          - mono_staging3
        default: mono_staging1
      Environment:
        required: true
        type: choice
        options:
          - prod
        default: prod

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.docker_tag.outputs.IMAGE_TAG }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '8'
          architecture: x64
      - uses: actions/setup-node@v2
        with:
          node-version: '17'
      - name: Convert github branch name to be compatible with docker tag name convention and generate tag name
        id: docker_tag
        run: echo "IMAGE_TAG=m-$(echo ${{ github.ref_name }} | sed 's/[^a-zA-Z0-9]/-/g')" >> $GITHUB_OUTPUT
      - name: Download Akto templates zip
        working-directory: ./apps/dashboard/src/main/resources
        run: wget -O test-library-master.zip https://github.com/akto-api-security/tests-library/archive/refs/heads/master.zip
      - name: Prepare Dashboard UI
        working-directory: ./apps/dashboard/
        run: npm install && export RELEASE_VERSION=${{steps.docker_tag.outputs.IMAGE_TAG}} && npm run build
      - name: Prepare Dashboard polaris UI
        working-directory: ./apps/dashboard/web/polaris_web
        run: npm install && export RELEASE_VERSION=${{steps.docker_tag.outputs.IMAGE_TAG}} && npm run build
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID_PROD}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY_PROD}}
          aws-region: ap-south-1

      - name: Deploy static site to S3 bucket
        if: ${{ github.event.inputs.Environment == 'prod' }}
        run: aws s3 sync ./apps/dashboard/web/dist s3://dashboard-on-cdn/on_prem/web/${{steps.docker_tag.outputs.IMAGE_TAG}}/dist --delete
      - name: Deploy polaris site to S3 bucket
        if: ${{ github.event.inputs.Environment == 'prod' }}
        run: aws s3 sync ./apps/dashboard/web/polaris_web/web/dist s3://dashboard-on-cdn/on_prem/polaris_web/${{steps.docker_tag.outputs.IMAGE_TAG}}/dist --delete

      - run: mvn package -Dakto-image-tag=${{ github.event.inputs.Tag }} -Dakto-build-time=$(eval "date +%s") -Dakto-release-version=${{steps.docker_tag.outputs.IMAGE_TAG}}
      - name: DockerHub login
        env:
          DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      - name: Build, tag, and push the image to DockerHub
        id: build-image-dockerhub
        env:
          ECR_REGISTRY: aktosecurity
          ECR_REPOSITORY: akto-api-security
          IMAGE_TAG: ${{ steps.docker_tag.outputs.IMAGE_TAG }}
        run: |
          docker buildx create --use
          # Build a docker container and push it to DockerHub 
          cd apps/dashboard
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY-dashboard:$IMAGE_TAG .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY-dashboard:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY-dashboard:$IMAGE_TAG"
          cd ../api-runtime
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY-runtime:$IMAGE_TAG .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY-runtime:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY-runtime:$IMAGE_TAG"       
          cd ../testing
          docker buildx build --platform linux/arm64/v8,linux/amd64 -t $ECR_REGISTRY/akto-api-testing:$IMAGE_TAG . --push
          echo "::set-output name=image::$ECR_REGISTRY/akto-api-testing:$IMAGE_TAG"       
          cd ../api-analyser
          docker build -t $ECR_REGISTRY/akto-api-context-analyzer:$IMAGE_TAG .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/akto-api-context-analyzer:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/akto-api-context-analyzer:$IMAGE_TAG"
          cd ../testing-cli
          docker buildx build --platform linux/arm64/v8,linux/amd64 -t $ECR_REGISTRY/akto-api-testing-cli:$IMAGE_TAG . --push
          echo "::set-output name=image::$ECR_REGISTRY/akto-api-testing-cli:$IMAGE_TAG"

      - name: Configure AWS Credentials for ECR
        if: ${{ github.event.inputs.Environment == 'prod' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID_PROD}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY_PROD}}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        if: ${{ github.event.inputs.Environment == 'prod' }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'
          registry-type: public

      - name: Build, tag, and push docker image to Amazon ECR
        if: ${{ github.event.inputs.Environment == 'prod' }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: akto-api-security
          REGISTRY_ALIAS: p7q3h0z2
          IMAGE_TAG: ${{ steps.docker_tag.outputs.IMAGE_TAG }}
        run: |
          docker buildx create --use
          # Build a docker container and push it to DockerHub 
          cd apps/dashboard
          docker build -t $ECR_REGISTRY/$REGISTRY_ALIAS/$ECR_REPOSITORY-dashboard:$IMAGE_TAG .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$REGISTRY_ALIAS/$ECR_REPOSITORY-dashboard:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY-dashboard:$IMAGE_TAG"
          cd ../api-runtime
          docker build -t $ECR_REGISTRY/$REGISTRY_ALIAS/$ECR_REPOSITORY-runtime:$IMAGE_TAG .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$REGISTRY_ALIAS/$ECR_REPOSITORY-runtime:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY-runtime:$IMAGE_TAG"       
          cd ../testing
          docker buildx build --platform linux/arm64/v8,linux/amd64 -t $ECR_REGISTRY/$REGISTRY_ALIAS/akto-api-testing:$IMAGE_TAG . --push
          echo "::set-output name=image::$ECR_REGISTRY/akto-api-testing:$IMAGE_TAG"       
          cd ../api-analyser
          docker build -t $ECR_REGISTRY/$REGISTRY_ALIAS/akto-api-context-analyzer:$IMAGE_TAG .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$REGISTRY_ALIAS/akto-api-context-analyzer:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/akto-api-context-analyzer:$IMAGE_TAG"
          cd ../testing-cli
          docker buildx build --platform linux/arm64/v8,linux/amd64 -t $ECR_REGISTRY/$REGISTRY_ALIAS/akto-api-testing-cli:$IMAGE_TAG . --push
          echo "::set-output name=image::$ECR_REGISTRY/akto-api-testing-cli:$IMAGE_TAG"

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2