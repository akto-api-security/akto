id: PORT_SCANNING
info:
  name: "Port scanning with SSRF"
  description: "The endpoint appears to be vulnerable to Server Side Request Forgery attack. The original request was replayed by replacing the URI parameter with some of the popular ports. The application responded with 2XX success code indicating that the port is open." 
  details: >
            "The endpoint appears to be vulnerable to Server Side Request Forgery attack. The original request was replayed by replacing the URI parameter with some of the popular ports. The application responded with 2XX success code indicating that the port is open.
            Modern concepts in application development make SSRF more common and more dangerous.
            More common - the following concepts encourage developers to access an external resource based on user input: Webhooks, file fetching from URLs, custom SSO, and URL previews.
            More dangerous - Modern technologies like cloud providers, Kubernetes, and Docker expose management and control channels over HTTP on predictable, well-known paths. Those channels are an easy target for an SSRF attack.
            It is also more challenging to limit outbound traffic from your application, because of the connected nature of modern applications.
            The SSRF risk can not always be completely eliminated. While choosing a protection mechanism, it is important to consider the business risks and needs."
  impact: "Successful exploitation can lead to access control bypass, sensitive data leak, or even compromise the application."
  category:
    name: SSRF
    shortName: Server Side Request Forgery
    displayName: Server Side Request Forgery (SSRF)
  subCategory: PORT_SCANNING
  severity: HIGH
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://github.com/OWASP/API-Security/blob/master/2023/en/src/0xa6-server-side-request-forgery.md"
    - "https://www.akto.io/blog/how-to-prevent-server-side-request-forgery-ssrf-as-a-developer"
    - "https://www.cobalt.io/blog/from-ssrf-to-port-scanner"
api_selection_filters:
  or:
    - request_payload:
        for_one:
          value:
            contains_either:
                - http
          key:
            extract: url_key
    - query_param:
        for_one:
          value:
            contains_either:
                - http
          key:
            extract: url_key

wordLists:
  filePaths: 
    - http://localhost:22
    - http://localhost:80
    - http://localhost:443
    - http://localhost:8080
    - http://localhost:27017

execute:
  type: single
  requests:
    - req:
      - modify_query_param:
          url_key: ${filePaths}
      - modify_body_param:
          url_key: ${filePaths}

validate:
  response_code:
    gte: 200
    lt: 300
  response_payload:
    regex:
      - "(?i)rejected"
      - "(?i)refused"
      - "(?i)timeout"
      - "MongoDB"
metadata:
  minAktoVersion: 1.29.1
  minOnpremVersion: 1.30.8