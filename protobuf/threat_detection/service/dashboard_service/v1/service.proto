syntax = "proto3";

package threat_detection.service.dashboard_service.v1;

import "threat_detection/message/malicious_event/event_type/v1/event_type.proto";

// Dashboard service which the dashboard actions will call instead of directly calling DB
option java_outer_classname = "DashboardServiceProto";
option java_package = "threat_detection.service.dashboard_service.v1";

message ListMaliciousRequestsResponse {
    message MaliciousEvent {
      string id = 1;
      string actor = 2;
      string filter_id = 3;
      int64 detected_at = 4;
      string ip = 5;
      string endpoint = 6;
      string method = 7;
      int32 api_collection_id = 8;
      string payload = 9;
      string country = 10;
      threat_detection.message.malicious_event.event_type.v1.EventType event_type = 11;
      string category = 12;
      string sub_category = 13;
      string type = 14;
      string ref_id = 15;
      string event_type_val = 16;
      string metadata = 17;
    }
    repeated MaliciousEvent malicious_events = 1;
    uint64 total = 2;
}

message TimeRangeFilter {
  optional uint64 start = 1;
  optional uint64 end = 2;
}

message ListMaliciousRequestsRequest {
    message Filter {
      repeated string actors = 1;
      repeated string urls = 2;
      repeated string ips = 3;
      optional TimeRangeFilter detected_at_time_range = 4;
      repeated string types = 5;
      repeated string sub_category = 6;
      repeated string latest_attack = 7;
    }

    // The number of alerts to return
    optional uint32 skip = 1;
    uint32 limit = 2;
    map<string, int32> sort = 3;
    Filter filter = 4;
}

message FetchAlertFiltersRequest {}

message FetchAlertFiltersResponse {
  repeated string actors = 1;
  repeated string urls = 2;
  repeated string sub_category = 3;
}

message ListThreatActorsRequest {
  message Filter {
    repeated string actors = 1;
    repeated string latest_ips = 2;
    optional TimeRangeFilter detected_at_time_range = 3;
    repeated string latest_attack = 4;
    repeated string country = 5;
  }

  optional uint32 skip = 1;
  uint32 limit = 2;
  map<string, int32> sort = 3;
  Filter filter = 4;
  uint32 start_ts = 5;
  uint32 end_ts = 6;
}

message ListThreatActorResponse {
  message ActivityData {
    string url = 1;
    string sub_category = 2;
    uint64 detected_at = 3;
    string severity = 4;
    string method = 5;
  }
  message ThreatActor {
    string id = 1;
    string latest_api_ip = 2;
    string latest_api_endpoint = 3;
    string latest_api_method = 4;
    uint64 discovered_at = 5;
    string country = 6;
    repeated ActivityData activity_data = 7;
    string latest_subcategory = 8;
  }
  repeated ThreatActor actors = 1;
  uint64 total = 2;
}

message FetchMaliciousEventsRequest {
  string ref_id = 1;
  string event_type = 2;
  string actor = 3;
  string filter_id = 4;
}

message FetchMaliciousEventsResponse {
  message MaliciousPayloadsResponse {
    string orig = 1;
    uint64 ts = 2;
    string metadata = 3;
  }
  repeated MaliciousPayloadsResponse malicious_payloads_response = 1;
}

message ListThreatApiRequest {
  message Filter {
    repeated string urls = 1;
    repeated string methods = 2;
    optional TimeRangeFilter detected_at_time_range = 3;
    repeated string latest_attack = 4;
  }

  optional uint32 skip = 1;
  uint32 limit = 2;
  map<string, int32> sort = 3;
  Filter filter = 4;
}

message ListThreatApiResponse {
  message ThreatApi {
    string endpoint = 1;
    string method = 2;
    uint64 discovered_at = 3;
    uint32 actors_count = 4;
    uint32 requests_count = 5;
  }

  repeated ThreatApi apis = 1;
  uint64 total = 2;
}

message ThreatActorByCountryRequest {
  uint32 start_ts = 1;
  uint32 end_ts = 2;
  repeated string latest_attack = 3;
}

message ThreatActorByCountryResponse {
  message CountryCount {
    string code = 1;
    uint32 count = 2;
  }

  repeated CountryCount countries = 1;
}

message ThreatCategoryWiseCountRequest {
  uint32 start_ts = 1;
  uint32 end_ts = 2;
  repeated string latest_attack = 3;
}

message ThreatActorFilterRequest {
}

message ThreatActorFilterResponse {
  repeated string sub_categories = 1;
  repeated string countries = 2;
  repeated string actor_id = 3;
}

message ThreatCategoryWiseCountResponse {
  message SubCategoryCount {
    string category = 1;
    string sub_category = 2;
    uint32 count = 3;
  }

  repeated SubCategoryCount  category_wise_counts = 1;
}

message ThreatSeverityWiseCountRequest {
  uint32 start_ts = 1;
  uint32 end_ts = 2;
  repeated string latest_attack = 3;
}

message ThreatSeverityWiseCountResponse {
  message SeverityCount {
    string severity = 1;
    uint32 count = 2;
  }

  repeated SeverityCount  category_wise_counts = 1;
}

message DailyActorsCountRequest {
  uint32 start_ts = 1;
  uint32 end_ts = 2;
  repeated string latest_attack = 3;
}

message DailyActorsCountResponse {
  message ActorsCount {
    uint32 ts = 1;
    uint32 total_actors = 2;
    uint32 critical_actors = 3;
  }

  repeated ActorsCount actors_counts = 1;
}

message ThreatActivityTimelineRequest {
  uint32 start_ts = 1;
  uint32 end_ts = 2;
  repeated string latest_attack = 3;
}

message ThreatActivityTimelineResponse {
  message SubCategoryData {
    string sub_category = 1;
    int32 activity_count = 2;
  }

  message ActivityTimeline {
    uint32 ts = 1;
    repeated SubCategoryData sub_category_wise_data = 2;
  }

  repeated ActivityTimeline threat_activity_timeline = 1;
}

message SplunkIntegrationRequest {
  string splunk_url = 1;
  string splunk_token = 2;
}

message SplunkIntegrationRespone {

}

message ModifyThreatActorStatusRequest {
  string ip = 1;
  string status = 2;
  uint64 updated_ts = 3;
}

message ModifyThreatActorStatusResponse {  
}

message GetThreatConfigurationRequest {
}

message ActorId {
    string type = 1; // "ip" or "header"
    string key = 2;  // "ip" or "headername"
    string kind = 3; // hostname or endpoint or collection
    string pattern = 4; // regex pattern or collection id
}
message Actor {
    repeated ActorId actor_id = 1;
}
message ThreatConfiguration {
  Actor actor = 1;
}

message ApiDistributionDataRequestPayload {
  message DistributionData {
    int32 api_collection_id = 1;
    string url = 2;
    string method = 3;
    int32 window_size = 4;
    int64 window_start_epoch_min = 5;
    map<string, int32> distribution = 6;
  }
  repeated DistributionData distribution_data = 1;
}

message ApiDistributionDataResponsePayload {
}

message FetchApiDistributionDataRequest {
    int32 api_collection_id = 1;
    string url = 2;
    string method = 3;
    int32 start_window = 4;
    int32 end_window = 5;
}

message FetchApiDistributionDataResponse {
  repeated BucketStats bucket_stats = 1;
}

message BucketStats {
  string bucket_label = 1; // e.g., "b1", "b2", ..., "b14"
  optional int32 min = 2;
  optional int32 max = 3;
  optional int32 p25 = 4;
  optional int32 p50 = 5; // median
  optional int32 p75 = 6;
}